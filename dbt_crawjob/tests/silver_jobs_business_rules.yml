version: 2

# Test business rules for silver jobs table
tests:
  # Test job_title normalization - should not have extra spaces
  - name: test_silver_jobs_normalized_job_title
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, job_title
      from {{ ref('stg_jobs') }}
      where job_title != trim(regexp_replace(job_title, '\s+', ' ', 'g'))
         or length(job_title) != length(trim(job_title))

  # Test company_name normalization - should be lowercase and trimmed
  - name: test_silver_jobs_normalized_company_name
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, company_name
      from {{ ref('stg_jobs') }}
      where company_name != lower(trim(regexp_replace(company_name, '\s+', ' ', 'g')))

  # Test location normalization - should be trimmed and single spaces
  - name: test_silver_jobs_normalized_location
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, location
      from {{ ref('stg_jobs') }}
      where location is not null
        and location != trim(regexp_replace(location, '\s+', ' ', 'g'))

  # Test for reasonable salary format (if provided)
  - name: test_silver_jobs_salary_format
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, salary
      from {{ ref('stg_jobs') }}
      where salary is not null
        and salary not regexp '^[0-9]+(\s*-\s*[0-9]+)?\s*(triệu|USD|VNĐ|k|K)?$'
        and salary not regexp '^(Thương lượng|Lương cạnh tranh|Competitive)$'

  # Test job_deadline should be in future or recent past (within 30 days)
  - name: test_silver_jobs_reasonable_deadline
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, job_deadline
      from {{ ref('stg_jobs') }}
      where job_deadline is not null
        and job_deadline < current_date - interval '30 days'

  # Test for duplicate jobs (same job_url and scraped_date)
  - name: test_silver_jobs_no_duplicates
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select
        job_url,
        scraped_date,
        count(*) as duplicate_count
      from {{ ref('stg_jobs') }}
      group by job_url, scraped_date
      having count(*) > 1

  # Test data completeness - important fields should not be empty
  - name: test_silver_jobs_complete_basic_info
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url
      from {{ ref('stg_jobs') }}
      where trim(job_title) = ''
         or trim(company_name) = ''
         or trim(location) = ''

  # Test job_description should have meaningful content
  - name: test_silver_jobs_meaningful_description
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url
      from {{ ref('stg_jobs') }}
      where job_description is null
         or length(trim(job_description)) < 20

  # Test requirements should be provided for most jobs
  - name: test_silver_jobs_has_requirements
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url
      from {{ ref('stg_jobs') }}
      where requirements is null
         or length(trim(requirements)) < 10

  # Test for incremental load - new data should be recent
  - name: test_silver_jobs_incremental_freshness
    model: stg_jobs
    schema: silver
    test_type: generic
    sql: |
      select job_url, scraped_at
      from {{ ref('stg_jobs') }}
      where scraped_at < current_date - interval '1 day'